{"version":3,"file":"MovementUtils.js","sourceRoot":"","sources":["../../../src/engine/utils/MovementUtils.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAExC,MAAM,CAAN,IAAY,iBAKX;AALD,WAAY,iBAAiB;IACzB,uDAAG,CAAA;IACH,2DAAK,CAAA;IACL,6DAAM,CAAA;IACN,yDAAI,CAAA;AACR,CAAC,EALW,iBAAiB,KAAjB,iBAAiB,QAK5B;AAED,MAAM,OAAO,IAAI;IACN,MAAM,CAAC,EAAE,CAAC,QAAmB,EAAE,MAAiB,EAAE,QAAgB;QACrE,OAAO,IAAI,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;aACvC,QAAQ,CAAC,IAAI,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;aAC3C,MAAM,EAAE;aACR,SAAS,EAAE;aACX,KAAK,CAAC,QAAQ,CAAC;aACf,GAAG,CAAC,IAAI,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,QAAmB,EAAE,SAA4B,EAAE,QAAgB;QACzF,QAAQ,SAAS,EAAE;YACf,KAAK,iBAAiB,CAAC,GAAG;gBACtB,yBAAY,QAAQ,IAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,QAAQ,IAAG;YACrD,KAAK,iBAAiB,CAAC,KAAK;gBACxB,yBAAY,QAAQ,IAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,QAAQ,IAAG;YACrD,KAAK,iBAAiB,CAAC,MAAM;gBACzB,yBAAY,QAAQ,IAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,QAAQ,IAAG;YACrD,KAAK,iBAAiB,CAAC,IAAI;gBACvB,yBAAY,QAAQ,IAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,QAAQ,IAAG;SACxD;IACL,CAAC;CACJ;AAED,MAAM,OAAO,QAAQ;IAEV,MAAM,CAAC,QAAQ,CAAC,QAAmB,EAAE,WAAuB;QAC/D,OAAO,QAAQ,CAAC,CAAC,IAAI,WAAW,CAAC,IAAI,IAAI,QAAQ,CAAC,CAAC,IAAI,WAAW,CAAC,KAAK;YACpE,QAAQ,CAAC,CAAC,IAAI,WAAW,CAAC,GAAG,IAAI,QAAQ,CAAC,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC;IAC1E,CAAC;IAEM,MAAM,CAAC,QAAQ,CAAC,SAAoB,EAAE,SAAoB;QAC7D,OAAO,OAAO,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9G,CAAC;CACJ","sourcesContent":["import { IPosition } from \"../scene/IScene.js\";\r\nimport { Vector2 } from \"./Vector2D.js\";\r\n\r\nexport enum MovementDirection {\r\n    top,\r\n    right,\r\n    bottom,\r\n    left\r\n}\r\n\r\nexport class Move {\r\n    public static to(position: IPosition, target: IPosition, distance: number): IPosition {\r\n        return new Vector2([position.x, position.y])\r\n            .subtract(new Vector2([target.x, target.y]))\r\n            .negate()\r\n            .normalize()\r\n            .scale(distance)\r\n            .add(new Vector2([position.x, position.y]));\r\n    }\r\n\r\n    public static toDirection(position: IPosition, direction: MovementDirection, distance: number): IPosition {\r\n        switch (direction) {\r\n            case MovementDirection.top:\r\n                return { ...position, y: position.y - distance };\r\n            case MovementDirection.right:\r\n                return { ...position, x: position.x + distance };\r\n            case MovementDirection.bottom:\r\n                return { ...position, y: position.y + distance };\r\n            case MovementDirection.left:\r\n                return { ...position, x: position.x - distance };\r\n        }\r\n    }\r\n}\r\n\r\nexport class Position {\r\n\r\n    public static isInside(position: IPosition, boundingBox: ClientRect): boolean {\r\n        return position.x >= boundingBox.left && position.x <= boundingBox.right &&\r\n            position.y >= boundingBox.top && position.y <= boundingBox.bottom;\r\n    }\r\n\r\n    public static distance(position1: IPosition, position2: IPosition): number {\r\n        return Vector2.distance(new Vector2([position1.x, position1.y]), new Vector2([position2.x, position2.y]));\r\n    }    \r\n}"]}