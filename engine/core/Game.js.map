{"version":3,"file":"Game.js","sourceRoot":"","sources":["../../../src/engine/core/Game.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAElD,MAAM,OAAO,IAAI;IAOb,YAAmB,KAA2B,EAAE,iBAAyB,CAAC,EAAE,MAAc,EAAE;QAFlF,mBAAc,GAAY,KAAK,CAAC;QAGtC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;IACpB,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAE5B,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QAEtB,IAAI,IAAI,GAAG,SAAS,EAAE,CAAC;QACvB,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,MAAM,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QACpC,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAE7C,sCAAsC;QACtC,+GAA+G;QAE/G,MAAM,cAAc,GAAG,GAAG,EAAE;YACxB,IAAI,IAAI,CAAC,cAAc;gBACnB,OAAO;YAEX,uBAAuB;YACvB,MAAM,GAAG,GAAG,SAAS,EAAE,CAAC;YACxB,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;YACzC,OAAO,IAAI,GAAG,QAAQ,EAAE;gBACpB,IAAI,GAAG,IAAI,GAAG,QAAQ,CAAC;gBACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACtB;YACD,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,IAAI,GAAG,GAAG,CAAC;YACX,kBAAkB;YAClB,qBAAqB,CAAC,cAAc,CAAC,CAAC;QAC1C,CAAC,CAAA;QAED,qBAAqB,CAAC,cAAc,CAAC,CAAC;IAC1C,CAAC;IAEM,IAAI;QACP,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC/B,CAAC;IAES,OAAO,CAAC,IAAY;QAC1B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAES,OAAO;QACb,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;IACzB,CAAC;CACJ","sourcesContent":["import { IScene, ISceneObject } from \"../scene/IScene.js\";\r\nimport { timestamp } from \"../utils/timeUtils.js\";\r\n\r\nexport class Game<TSceneObject extends ISceneObject> {\r\n\r\n    protected readonly _scene: IScene<TSceneObject>;\r\n    protected readonly _fps: number;\r\n    protected readonly _slowDownFactor: number;\r\n    protected _stopRequested: boolean = false;\r\n\r\n    public constructor(scene: IScene<TSceneObject>, slowDownFactor: number = 1, fps: number = 60) {\r\n        this._scene = scene;\r\n        this._slowDownFactor = slowDownFactor;\r\n        this._fps = fps;\r\n    }\r\n\r\n    public start() {\r\n        this._stopRequested = false;\r\n\r\n        this._scene.prepare();\r\n\r\n        let last = timestamp();\r\n        let diff = 0;\r\n        const step = (1 / this._fps) * 1000;\r\n        const slowStep = this._slowDownFactor * step;\r\n\r\n        // https://github.com/darsain/fpsmeter\r\n        // const fpsmeter = new FPSMeter(options.fpsmeter || { decimals: 0, graph: true, theme: 'dark', left: '5px' });\r\n\r\n        const updateCallback = () => {\r\n            if (this._stopRequested)\r\n                return;\r\n\r\n            //fpsmeter.tickStart();\r\n            const now = timestamp();\r\n            diff = diff + Math.min(1000, now - last);\r\n            while (diff > slowStep) {\r\n                diff = diff - slowStep;\r\n                this._update(step);\r\n            }\r\n            this._render();\r\n            last = now;\r\n            //fpsmeter.tick();\r\n            requestAnimationFrame(updateCallback);\r\n        }\r\n\r\n        requestAnimationFrame(updateCallback);\r\n    }    \r\n\r\n    public stop() {\r\n        this._stopRequested = true;\r\n    }\r\n\r\n    protected _update(diff: number) {\r\n        this._scene.update(diff);\r\n    }\r\n\r\n    protected _render() {\r\n        this._scene.render();\r\n    }    \r\n}"]}